buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/gesellix/gradle-plugins' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow',                 version: '1.2.3'
        classpath group: 'de.gesellix',                         name: 'gradle-debian-plugin',   version: '14'
        classpath group: 'org.springframework.build.gradle',    name: 'propdeps-plugin',        version: '0.0.7'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release'        version '1.4.1'
    id 'com.ewerk.gradle.plugins.integration-test'  version '1.0.8'
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'propdeps'
apply plugin: 'propdeps-idea'
apply plugin: 'propdeps-eclipse'
apply plugin: 'pkg-debian'

/***** basics *****/

project.group = 'pl.allegro.tech.hadoop'
scmVersion {
    tag {
        prefix = project.rootProject.name
    }
}
project.version = scmVersion.version

mainClassName = 'pl.allegro.tech.hadoop.compressor.Compressor'
sourceCompatibility = JavaVersion.VERSION_1_7

/***** dependencies *****/

repositories {
    mavenCentral()
    maven { url 'http://typesafe.artifactoryonline.com/typesafe/twitter-cache' }
    maven { url 'https://repository.cloudera.com/artifactory/cloudera-repos/' }
    maven { url 'http://maven.twttr.com' }
}

project.ext.versions = [
        spark: '2.1.0',
        scalaMinMaj: '2.11',
        scala: "2.11.8",
        hadoop: '2.6.0',
        kafka: '0.10.0.1'
]

configurations {
//    all*.exclude group: 'javax.servlet'
    provided.exclude module: 'hadoop-client'
    integrationCompile.extendsFrom(testCompile)
}

def scaled(String dep) {
    "${dep}_${project.ext.versions.scalaMinMaj}"
}

dependencies {
    provided group: 'org.apache.spark',          name: scaled('spark-core'), version: project.ext.versions.spark
    provided group: 'org.scala-lang',            name: 'scala-library',      version: project.ext.versions.scala
    provided group: 'org.apache.hadoop',         name: 'hadoop-hdfs',        version: project.ext.versions.hadoop
    provided group: 'org.apache.hadoop',         name: 'hadoop-common',      version: project.ext.versions.hadoop
    provided group: 'org.apache.httpcomponents', name: 'httpclient',         version: '4.5'

    compile group: 'org.apache.hadoop',         name: 'hadoop-mapreduce-client-core',   version: project.ext.versions.hadoop
    compile group: 'org.schemarepo',            name: 'schema-repo-client',             version: '0.1.3'
    compile group: 'com.hadoop.gplcompression', name: 'hadoop-lzo',                     version: '0.4.19'

    compile group: 'org.apache.kafka',          name: scaled('kafka'),     version: project.ext.versions.kafka

    testCompile group: 'org.mockito',       name: 'mockito-all',        version: '1.9.5'
    testCompile group: 'junit',             name: 'junit',              version: '4.11'
    testCompile group: 'org.apache.hadoop', name: 'hadoop-hdfs',        version: project.ext.versions.hadoop, classifier: 'tests'
    testCompile group: 'org.apache.hadoop', name: 'hadoop-common',      version: project.ext.versions.hadoop, classifier: 'tests'

    testCompile (group: 'com.palantir',      name: 'curator-test-rule',  version: '0.0.3') {
        exclude group: 'com.google.guava'
    }

    testCompile (group: 'com.github.tomakehurst', name: 'wiremock', version: '1.58') {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.google.guava'
    }
}



idea {
    module {
        scopes.TEST.plus += [ configurations.integrationCompile ]
        testSourceDirs += file("${projectDir}/src/integration/resources")
    }
}

/***** packaging *****/

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    dependencies {
        exclude(dependency("org.apache.spark:${scaled('spark-core')}:${project.ext.versions.spark}"))
        exclude(dependency("org.scala-lang:scala-library:${project.ext.versions.scala}"))
        exclude(dependency("org.apache.hadoop:hadoop-hdfs:${project.ext.versions.hadoop}"))
    }
}

task prepareControlFile(type: Copy) {
  from 'src/package'
  into 'build/package'
  include 'control.tpl'
  rename { file -> 'control' }
  expand(project: project)
}

debian {
  packagename = 'camus-compressor'
  controlDirectory = 'build/package'
  changelogFile = 'src/package/changelog'

  data {
    def baseDir = 'build'
    file {
      name = "${baseDir}/libs/camus-compressor-${project.version}-all.jar"
      target = "usr/lib/hadoop-tools/camus-compressor/compressor-${project.version}.jar"
      mapper {
        fileMode = '644'
      }
    }
    file {
      name = 'src/main/resources/camus-compressor.properties'
      target = 'etc/camus-compressor/camus-compressor.properties'
      mapper {
        fileMode = '644'
      }
    }
    file {
      name = 'src/main/resources/compressor.sh'
      target = 'usr/lib/hadoop-tools/camus-compressor/compressor.sh'
      mapper {
        fileMode = '755'
      }
    }
    link {
      path = 'usr/lib/hadoop-tools/camus-compressor/compressor.jar'
      name = "/usr/lib/hadoop-tools/camus-compressor/compressor-${project.version}.jar"
    }
  }
}

integrationTest {
    jvmArgs "-XX:MaxPermSize=256m"
}


task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}
